# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: Project Manager Native Build

on:
  push:
    tags:
      - projectmanagernative-v*

jobs:

  build:

    strategy:
      matrix:
        configuration: [ReleaseNative]
        platform: [x64]

    runs-on: windows-latest

    env:
      Solution_Name: src\ProjectManager.sln                         

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0        
        submodules: recursive

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:Platform="x64"
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath "GitHubActionsWorkflow.pfx"        
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        Write-Output "certificatePath=$certificatePath" >> $env:GITHUB_ENV

    # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="$env:certificatePath" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:PackageCertificatePassword="${{ secrets.PFX_KEY }}"
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:certificatePath

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: D:\a\ProjectManager\ProjectManager\src\JPPProjectManager\Packages
    
    - name: Upload to Azure
      run: |
        Invoke-WebRequest -Uri 'https://azcopyvnext.azureedge.net/release20220315/azcopy_windows_amd64_10.14.1.zip' -OutFile 'azcopyv10.zip'
        $AzCopy = (Expand-archive -Path '.\azcopyv10.zip' -Destinationpath '.\' -PassThru | where-object {$_.Name -eq 'azcopy.exe'}).FullName
        # Invoke AzCopy
        & $AzCopy copy "D:\a\ProjectManager\ProjectManager\src\JPPProjectManager\Packages\**" "${{ secrets.PM_BLOB_SAS }}" --recursive=true