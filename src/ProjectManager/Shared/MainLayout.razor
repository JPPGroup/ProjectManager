@using ProjectManager.Components
@using ProjectManager.Data
@using Blazorise
@using Blazorise.Components
@using Blazorise.Snackbar
@using ProjectManager.Data.Native
@inherits LayoutComponentBase
@inject TaskStateMachine _stateMachine;
@inject NavigationManager _navMan;
@inject UINotifier _notifier;

<PageTitle>JPP Project Manager</PageTitle>

<div class="page">
    <!--<div class="sidebar">
        <NavMenu />
    </div>-->

    <main>

        <Bar Breakpoint="Breakpoint.Desktop" Background="Background.Light" ThemeContrast="ThemeContrast.Light">
            <BarBrand>
                Project Manager
            </BarBrand>
            <BarToggler />
            <BarMenu>
                <BarStart>
                    <AuthorizeView>
                        <Authorized>
                            <BarItem>
                                <BarLink To="">Summary</BarLink>
                            </BarItem>
                            <BarItem>
                                <BarLink To="projects">Projects</BarLink>
                            </BarItem>
                            <BarItem>
                                <BarLink To="workplan">Workplan</BarLink>
                            </BarItem>
                            <BarItem>
                                <BarDropdown>
                                    <BarDropdownToggle>New</BarDropdownToggle>
                                    <BarDropdownMenu>                                
                                        <BarDropdownItem To="new/project">Project</BarDropdownItem>
                                        <BarDropdownItem To="new/quote">Quote</BarDropdownItem>
                                    
                                                                
                                    </BarDropdownMenu>
                                </BarDropdown>
                            </BarItem>
                        </Authorized>
                    </AuthorizeView>

                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>Finance</BarDropdownToggle>
                            <BarDropdownMenu>
                                <AuthorizeView>
                                    <Authorized>
                                        <BarDropdownItem To="finance/wip">Work In Progress</BarDropdownItem>
                                        <BarDropdownItem To="finance/projectinvoices">Project Invoices</BarDropdownItem>
                                    </Authorized>
                                </AuthorizeView>

                                <BarDropdownDivider />
                                <BarDropdownItem To="finance/consultinginvoices">Consulting Invoices</BarDropdownItem>
                                <BarDropdownItem To="finance/sfinvoices">SF Invoices</BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                    <BarItem>
                        <Switch TValue="bool" @bind-Checked="@showReports">Show Reports</Switch>
                    </BarItem>
                </BarStart>
                <BarEnd>
                    <BarItem>
                        <!-- top-row px-4 auth -->
                        <div style="align-items: center; justify-content: flex-end; display: flex;">
                            <LoginDisplay />
                        </div>
                    </BarItem>
                </BarEnd>
            </BarMenu>
        </Bar>

        <article class="content px-4">
            <CascadingValue Value="@_stateMachine">
                <CascadingValue Value="@showReports">
                    <Alert Color="Color.Success" @bind-Visible="@Flags.NativeFileNotAvailable">
                            <AlertDescription>
                                For full functionality please install the native version available here
                            </AlertDescription>
                            <CloseButton/>
                        </Alert>
                        @Body
                        <!--TODO: Review why backdrop isnt working-->
                        <TaskDetailView Visible="taskDetailVisible" OnSaveChanges="SaveChanges" OnDiscardChanges="DiscardChanges" Task="_stateMachine.SelectedTask"/>
                </CascadingValue>
            </CascadingValue>
            <SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Center" />
        </article>
    </main>
</div>

@code {
    private bool taskDetailVisible = false;
    SnackbarStack snackbarStack;

    [Parameter]
    public bool showReports { get; set; } = false;

    [CascadingParameter]
    public FeatureFlags Flags { get; set; }

    protected override void OnParametersSet()
    {
        if (_stateMachine == null)
            throw new InvalidOperationException("TaskState not cascaded to project view");

        _stateMachine.PropertyChanged += (e, arg) =>
        {
            if (arg.PropertyName == nameof(TaskStateMachine.SelectedTask))
            {
                taskDetailVisible = true;
            }
            StateHasChanged();
        };
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await Flags.ScanNative();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SaveChanges()
    {
        if (_stateMachine.SelectedTask.ProjectId == Guid.Empty)
        {
            _stateMachine.SelectedProject.Tasks.Add(_stateMachine.SelectedTask);
        }
        await _stateMachine.SaveChangesAsync();
        taskDetailVisible = false;
        await _stateMachine.SyncProjects();
    }

    private async Task DiscardChanges()
    {
        _stateMachine.SelectedTask = null;
        taskDetailVisible = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _notifier.SetTarget(snackbarStack);
        }
        base.OnAfterRender(firstRender);
    }
}
