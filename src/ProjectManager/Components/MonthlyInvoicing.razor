@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using ProjectManager.Data
@using CommonDataModels
@using System.Globalization
@using CommonDataServices
@inject ProjectService _projects

<div class="container-fluid">
    <div class="row">
        <div class="col-md-5">
            <BarChart @ref="chart" TItem="decimal" Options="@Options" />
        </div>
        <div class="col-md-7">
            <div class="d-flex flex-column" style="">
                <div class="flex-grow-1">
                <Heading Size="HeadingSize.Is4">
                Invoiced
            </Heading>
            <div style="max-height: 25vh; font-size: 0.8em; overflow-y: auto; overflow-x: hidden;">
                @foreach (Invoice i in invoices)
                {
                    if (!i.Draft)
                    {

                        <div class="row">
                            <div class="col-md-3">
                                @i.ProjectCode
                            </div>
                            <div class="col-md-7">
                                @i.ProjectName
                            </div>
                            <div class="col-md-2" style="text-align: right;">
                                @string.Format("{0:C}", i.NettValue)
                            </div>
                        </div>
                    }
                }
                </div>
                </div>
                <div class="flex-grow-1">
                    @if (incomingInvoices.Count > 0)
                    {
                        <Heading Size="HeadingSize.Is4">
                            Disbursements
                        </Heading>
                        <div style="max-height: 15vh; font-size: 0.8em; overflow-y: auto; overflow-x: hidden;">
                            @foreach (PurchaseOrderLineInvoice i in incomingInvoices)
                            {                                
                                    <div class="row">
                                        <div class="col-md-3">
                                            @i.ProjectCode
                                        </div>
                                        <div class="col-md-7">
                                            @i.ProjectName
                                        </div>
                                        <div class="col-md-2" style="text-align: right;">
                                            @string.Format("{0:C}", i.Value)
                                        </div>
                                    </div>
                                
                            }
                        </div>
                    }
                </div>
                <div class="flex-grow-1">
                @if (UnapprovedInvoiceTotal > 0)
                {
                    <Heading Size="HeadingSize.Is4">
                        Awaiting Approval
                    </Heading>
                    <div style="max-height: 15vh; font-size: 0.8em; overflow-y: auto; overflow-x: hidden;">
                        @foreach (Invoice i in invoices)
                        {
                            if (i.Draft)
                            {
                                <div class="row">
                                    <div class="col-md-3">
                                        @i.ProjectCode
                                    </div>
                                    <div class="col-md-7">
                                        @i.ProjectName
                                    </div>
                                    <div class="col-md-2" style="text-align: right;">
                                        @string.Format("{0:C}", i.NettValue)
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
                </div>

            
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DateTime TargetMonth { get; set; }

    [Parameter]
    public string Company { get; set; }

    private List<Invoice> invoices { get; set; }
    private List<PurchaseOrderLineInvoice> incomingInvoices { get; set; }

    private decimal InvoiceTotal;
    private decimal UnapprovedInvoiceTotal;
    private decimal DisbursementTotal;

    BarChart<decimal> chart;

    BarChartOptions Options = new BarChartOptions()
            {
                Scales = new ChartScales()
                {
                    Y = new ChartAxis()
                    {
                        Stacked = true
                    },
                    X = new ChartAxis()
                    {
                        Stacked = true
                    }
                }
            };

    protected override async Task OnParametersSetAsync()
    {
        invoices = new List<Invoice>();
        incomingInvoices = new List<PurchaseOrderLineInvoice>();
        InvoiceTotal = 0;
        UnapprovedInvoiceTotal = 0;
        DisbursementTotal = 0;

        await foreach (Invoice i in _projects.GetMonthInvoices(Company, TargetMonth))
        {
            invoices.Add(i);

            if(i.Draft)
            {
                UnapprovedInvoiceTotal += i.NettValue.Value;
            } else
            {
                InvoiceTotal += i.NettValue.Value;
            }

            StateHasChanged();
        }

        await foreach (PurchaseOrderLineInvoice i in _projects.GetIncomingMonthInvoices(Company, TargetMonth))
        {
            incomingInvoices.Add(i);

            DisbursementTotal += i.Value.Value;
            StateHasChanged();
        }

        await HandleRedraw();
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        /*if ( firstRender )
            {
            await HandleRedraw();
        }*/
    }

    async Task HandleRedraw()
    {
        await chart.Clear();

        string[] labels = new[] { CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(TargetMonth.Month) };

        var invoiced = new BarChartDataset<decimal>
            {
                Label = "Invoiced",
                Data = new decimal[] { Math.Max(InvoiceTotal - DisbursementTotal, 0) }.ToList(),
                BackgroundColor = new List<string> { ChartColor.FromHtmlColorCode("#33cc33") }

            };
        var approval  = new BarChartDataset<decimal>
        {
            Label = "Awaiting Approval",
            Data = new decimal[] {UnapprovedInvoiceTotal }.ToList(),
                BackgroundColor = new List<string> { ChartColor.FromHtmlColorCode("#adebad") }
            };

        var disbursement = new BarChartDataset<decimal>
            {
                Label = "Disbursement",
                Data = new decimal[] { DisbursementTotal }.ToList(),
                BackgroundColor = new List<string> { ChartColor.FromHtmlColorCode("#ff3333") }
            };

        await chart.AddLabelsDatasetsAndUpdate( labels, invoiced, approval, disbursement );        
    }
}
