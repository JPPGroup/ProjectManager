@using ProjectManager.Data
@using ProjectManager.Data.Native
@inject NativeFiles _nativeFiles;
@inject ApplicationDbContext _context
@using Blazorise
@using CommunityToolkit.Diagnostics
@using ProjectDocuments
@using ProjectManagerContext.Data

<Buttons Role="ButtonsRole.Toolbar">
    <Buttons>
        @if (folder != null)
        {
            <Button Color="Color.Primary" Clicked="SyncFolder" Loading="@isSyncing">Sync</Button>
        }
        <!--<Button Color="Color.Primary" Clicked="ShowRegister">Document Register</Button>-->
    </Buttons >
    
    
</Buttons>

<Table Striped>
    <TableHeader>
    <TableRow>
        <TableRowCell>Drawing Number</TableRowCell>
        <TableRowCell>Drawing Name</TableRowCell>
        <TableRowCell>Latest Revision</TableRowCell>
        @foreach (DrawingIssue di in _manager.Issue.Values)
        {
            <TableRowCell><div style="writing-mode: vertical-lr">@di.Date.ToShortDateString()<br/>@di.Name</div></TableRowCell>
        }
    </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (DwgName name in _manager.Names)
        {
            <TableRow>
                <TableRowHeader>@name.Number</TableRowHeader>
                <TableRowCell>@name.Name</TableRowCell>
                <TableRowCell>
                    @if (Flags.NativeFileAvailable)
                    {
                        DrawingIssue di = _manager.Issue.Values.Last(di =>
                        {
                            if (di.Entries.Any(di => di.Number == name.Number))
                            {
                                return di.GetEntry(name.Number).Revision == name.Revision;
                            }
                            return false;
                        });

                        <Anchor Clicked="async () => await OpenDocument(di.GetEntry(name.Number).Path)">
                            @name.Revision
                        </Anchor>
                    }
                    else
                    {
                        @name.Revision
                    }
                </TableRowCell>
                @foreach (DrawingIssue di in _manager.Issue.Values)
                {
                    <TableRowCell>
                        @if (@di.Entries.Any(di => di.Number == name.Number))
                        {
                            @if (Flags.NativeFileAvailable)
                            {
                                <Anchor Clicked="async () => await OpenDocument(di.GetEntry(name.Number).Path)">
                                    @di.GetEntry(name.Number).Revision
                                </Anchor>
                            }
                            else
                            {
                                @di.GetEntry(name.Number).Revision
                            }
                        }
                        else
                        {
                            @(" - ")
                        }
                    </TableRowCell>

                }
            </TableRow>
        }
    </TableBody>
</Table>

@if (_manager.Errors.Any())
{
    <div>
        Errors encountered:
    </div>
    <ul>
    @foreach (string syncError in _manager.Errors)
    {
    <li>@syncError</li>
    }
    </ul>
}

@code {
    [Parameter]
    public Project? Project { get; set; }

    DrawingIssueManager? _manager;
    private ProjectFolder? folder;

    private bool isSyncing = false;

    [CascadingParameter]
    public FeatureFlags? Flags { get; set; }

    protected override void OnParametersSet()
    {
        Guard.IsNotNull(Project);
        _manager = Project.GetDrawingIssueManager(_context);
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (await _nativeFiles.Available())
        {
            Guard.IsNotNull(Project);
            folder = await _nativeFiles.GetProjectFolder(Project.ProjectId);
        }
        await base.OnParametersSetAsync();
    }

    private async Task SyncFolder()
    {
        Guard.IsNotNull(folder);
        Guard.IsNotNull(_manager);

        isSyncing = true;
        StateHasChanged();
        IEnumerable<string> drawingFiles = await folder.GetIssuePaths();
        _manager.PopulateFromFileSystem(drawingFiles);
        isSyncing = false;
        StateHasChanged();
    }

    private async Task OpenDocument(string path)
    {
        await _nativeFiles.Open(path);
    }

}
